extern crate heapless;

use heapless::consts::*;
use heapless::Vec;

#[derive(Debug)]
struct Foo {
    n: u32,
}

impl Foo {
    fn new(n: u32) -> Self {
        Self { n }
    }
}

// Mock implementation of Clone for demonstration purposes.
impl Clone for Foo {
    fn clone(&self) -> Self {
        println!("cloning {:?}", self);
        Self {
            n: self.n,
        }
    }
}

// Implement Drop to demonstrate the issue.
impl Drop for Foo {
    fn drop(&mut self) {
        println!("Dropping {:?}", self);
    }
}

fn main() {
    // Create a Vec with some elements.
    let mut v: Vec<Foo, U16> = Vec::new();
    v.push(Foo::new(1)).unwrap();
    v.push(Foo::new(2)).unwrap();
    v.push(Foo::new(3)).unwrap();

    // Start iterating over the vector and take one element out.
    let mut i = v.into_iter();  // Convert into an iterator
    if let Some(item) = i.next() {
        println!("popped {:?}", item);
        core::mem::drop(item);  // Drop the first item
    }

    // Clone the iterator, which should only include remaining elements.
    println!("cloning iter");
    let mut j = i.clone();
    
    // Iterate over the cloned iterator to see what items are present.
    for item in j {
        println!("Cloned item: {:?}", item);
    }
}
