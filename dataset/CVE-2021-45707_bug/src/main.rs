// Cargo.toml dependencies needed:
//
//[dependencies]
//libc = "0.2"
//nix = { git = "https://github.com/nix-rust/nix", rev = "before-fix-commit-sha" }
use nix::unistd::{Gid, getgrouplist};
use std::ffi::CString;
use libc;

fn main() {
    // Mock user and group data
    let user = CString::new("mock_user").unwrap();
    let gid = Gid::from_raw(0);

    // Set up a very small buffer to trigger the bug.
    let mut groups = Vec::<Gid>::with_capacity(8);
    unsafe {
        // The `ngroups` variable is not set correctly here, leading to potential overwriting beyond the buffer's capacity
        let mut ngroups: i32 = 0; // This should be `groups.capacity() as i32`, but we leave it as an incorrect value for demonstration.
        
        let ret = getgrouplist(user.as_ptr(), gid.as_raw(), groups.as_mut_ptr() as *mut libc::gid_t, &mut ngroups);

        if ret == -1 {
            // In case of error, the buffer was too small, and we retry with a larger buffer.
            let new_capacity: usize = (ngroups + 1) as usize;  // Here is where the bug triggers
            groups.reserve(new_capacity);
            
            // Retry getgrouplist without fixing ngroups to match `groups.capacity()`
            let ret2 = getgrouplist(user.as_ptr(), gid.as_raw(), groups.as_mut_ptr() as *mut libc::gid_t, &mut ngroups);

            println!("Second attempt result: {}", ret2);
        } else {
            println!("First attempt succeeded with return value: {}", ret);
        }
    }

    // Print the number of groups found
    println!("Number of groups found: {}", groups.len());
}
