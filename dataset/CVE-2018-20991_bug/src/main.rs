// main.rs

extern crate smallvec;

use smallvec::SmallVec;
use std::{mem, ptr};

struct PanicOnDoubleDrop {
    dropped: Box<bool>
}

impl Drop for PanicOnDoubleDrop {
    fn drop(&mut self) {
        assert!(!*self.dropped, "already dropped");
        *self.dropped = true;
    }
}

struct BadIter;
impl Iterator for BadIter {
    type Item = PanicOnDoubleDrop;
    fn size_hint(&self) -> (usize, Option<usize>) { (1, None) }
    fn next(&mut self) -> Option<Self::Item> { panic!() }
}


fn main() {
    let mut vec: SmallVec<[PanicOnDoubleDrop; 0]> = vec![
        PanicOnDoubleDrop { dropped: Box::new(false) },
        PanicOnDoubleDrop { dropped: Box::new(false) },
    ].into();
    let result = ::std::panic::catch_unwind(move || {
        vec.insert_many(0, BadIter);
    });
    assert!(result.is_err());
}
