// We need serde for serialization/deserialization support.
extern crate serde;
#[macro_use]
extern crate serde_derive;

use std::vec::Vec;
use serde::{Deserialize, Serialize};

// Simplified mockup of VecStorage to demonstrate the issue
#[derive(Serialize, Deserialize)]
pub struct VecStorage<T> {
    data: Vec<T>,
    nrows: usize,
    ncols: usize,
}

fn main() {
    // Example serialized data that breaks the invariant.
    let json = r#"
        {"data":[1, 2, 3], "nrows":2, "ncols":2}
    "#;

    // Deserialize from JSON
    let storage: VecStorage<i32> = serde_json::from_str(json).expect("Deserialization failed");

    // Check if the invariant is broken
    assert_eq!(storage.data.len(), storage.nrows * storage.ncols,
               "Invariant broken: data length should be nrows * ncols");
}
