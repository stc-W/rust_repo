#[macro_use]
extern crate slice_deque;

use slice_deque::SliceDeque;

fn main() {
    #[derive(Clone, Copy, Debug, PartialEq)]
    pub struct Foo {
        a: i64,
        b: Option<(bool, i64)>,
    }

    let mut deque = SliceDeque::new();

    // Setup the deque with 918 elements
    for _ in 0..918 {
        deque.push_front(Foo { a: 42, b: None });
    }

    // Perform pop operations and assertions
    for _ in 0..237 {
        assert_eq!(deque.pop_front(), Some(Foo { a: 42, b: None }));
        assert!(!deque.is_empty());
        
        if !deque.is_empty() {
            // Check the last element to ensure it hasn't been corrupted
            let last_element = unsafe { *deque.get_unchecked(deque.len() - 1) };
            
            assert_eq!(last_element, Foo { a: 42, b: None });
        }
    }

    println!("All checks passed!");
}
