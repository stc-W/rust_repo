#![forbid(unsafe_code)]

use std::fmt::Display;
use core::marker::PhantomData;

struct DropDetector<V : Display> {
    value: V,
}

impl<V : Display> DropDetector<V> {
    fn new(value: V) -> Self {
        DropDetector { value }
    }
}

impl<V : Display> Drop for DropDetector<V> {
    fn drop(&mut self) {
        println!("Dropping {}", self.value);
    }
}

struct PanickingIterator<V> {
    phantom: PhantomData<V>
}

impl<V> PanickingIterator<V> {
    fn new() -> Self {
        PanickingIterator { phantom : PhantomData }
    }
}

impl<V> Iterator for PanickingIterator<V> {
    type Item = V;
    fn next(&mut self) -> Option<Self::Item> { panic!("Iterator panicked"); }
}

impl<V> ExactSizeIterator for PanickingIterator<V> {
    fn len(&self) -> usize { 1 }
}

// Mock TooDee struct and methods for the sake of this example.
struct TooDee<T> {
    data: Vec<Vec<T>>,
}

impl<T> TooDee<T> {
    // FromVec method mock
    pub fn from_vec(rows: usize, cols: usize, items: Vec<T>) -> Self 
    where T: Clone + std::fmt::Debug,
          <T as std::iter::FromIterator>::IntoIter: Iterator<Item = T>,
    {
        let mut data = vec![vec![]; rows];
        for (i, item) in items.into_iter().enumerate() {
            data[i / cols].push(item);
        }
        TooDee { data }
    }

    // Insert row method mock
    pub fn insert_row(&mut self, index: usize, iter: impl ExactSizeIterator<Item = T>) 
    where <T as std::iter::FromIterator>::IntoIter: Iterator<Item = T>,
    {
        let start = index * self.data[0].len();
        
        // Prevent duplicate (or any) drops on the portion of the array we are modifying.
        for row in &mut self.data[index..] {
            row.resize(row.len() + iter.len(), T::default());
        }

        let mut elem_count = 0;
        for e in iter.take(self.data[0].len()) {
            if index > 0 && elem_count < self.data[0].len() {
                self.data[index][elem_count] = e;
            }
            elem_count += 1;
        }

        assert_eq!(self.data[0].len(), elem_count, "unexpected iterator length");
    }

    // Indexing method mock
    pub fn get(&self, row: usize, col: usize) -> &T {
        &self.data[row][col]
    }
}

fn main() {
    let vec = vec![DropDetector::new(1), DropDetector::new(2), DropDetector::new(3)];
    let mut toodee : TooDee<_> = TooDee::from_vec(1, 3, vec);
    
    // Trigger the bug by calling insert_row with a panicking iterator
    toodee.insert_row(0, PanickingIterator::<DropDetector<u32>>::new());
}
