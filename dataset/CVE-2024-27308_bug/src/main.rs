use std::time::Duration;
use tokio::net::windows::named_pipe::{ClientOptions, ServerOptions};

const PIPE_NAME: &str = r"\\.\pipe\tokio-heap-issue";

#[tokio::main]
async fn main() {
    let connect_client_task = tokio::spawn(connect_client());
    let client_fn_task = tokio::spawn(client_fn());

    let connected = tokio::time::timeout(Duration::from_millis(1000), connect_client_task)
        .await
        .unwrap_or(Ok(Ok(false)))
        .unwrap_or(Ok(false))
        .unwrap_or(false);
    
    assert!(connected);

    // Wait for the client_fn to finish its job.
    let _ = client_fn_task.await;
}

async fn connect_client() -> std::io::Result<bool> {
    let server = ServerOptions::new()
        .first_pipe_instance(true)
        .create(PIPE_NAME)?;

    server.connect().await?;

    Ok(true)
}

async fn client_fn() {
    // Five tries to connect
    for _ in 0..5 {
        tokio::time::sleep(Duration::from_millis(20)).await;
        
        match ClientOptions::new()
            .read(true)
            .write(true)
            .open(PIPE_NAME) {
                Ok(_) => return,
                Err(_) => continue, // pipe not created yet or busy, sleep and wait
        }
    }
}
