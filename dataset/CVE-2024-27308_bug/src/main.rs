use std::time::Duration;

use tokio::net::windows::named_pipe::{ClientOptions, ServerOptions};

const PIPE_NAME: &str = r"\\.\pipe\tokio-heap-issue";

#[tokio::main]
async fn main() {
    let connect_client = tokio::spawn(connect_client());
    tokio::spawn(client_fn());

    let connected = tokio::time::timeout(Duration::from_millis(1000), connect_client)
        .await
        .unwrap_or(Ok(Ok(false)))
        .unwrap_or(Ok(false))
        .unwrap_or(false);
    assert!(connected);
}

async fn connect_client() -> std::io::Result<bool> {
    let server = ServerOptions::new()
        .first_pipe_instance(true)
        .create(PIPE_NAME)?;

    server.connect().await?;

    Ok(true)
}

async fn client_fn() {
    // five tries to connect
    for _ in 0..5 {
        tokio::time::sleep(Duration::from_millis(20)).await;
        match ClientOptions::new().read(true).write(true).open(PIPE_NAME) {
            // Return after we've connected
            Ok(_) => return,
            Err(_) => {
                // pipe not created yet or busy, sleep and wait
                continue;
            }
        };
    }
}