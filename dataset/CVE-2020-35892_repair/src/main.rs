// Import necessary modules and crates.
#![forbid(unsafe_code)]

extern crate simple_slab;

#[derive(Debug, PartialEq)]
struct DropDetector(u32);

impl Drop for DropDetector {
    fn drop(&mut self) {
        println!("Dropping {}", self.0);
    }
}

fn main() {
    // Initialize the slab with a capacity of 2 elements.
    let mut slab = simple_slab::Slab::with_capacity(2);
    
    // Insert two elements into the slab.
    slab.insert(DropDetector(123));
    slab.insert(DropDetector(456));

    // Attempt to read from an out-of-bound index, which should trigger a panic or undefined behavior.
    println!("{:?}", slab[20]);  // This line triggers the OOB read issue.

    // Remove the first element and check if it's correct.
    assert_eq!(slab.remove(0).0, 123);  // Expected to work as intended

    // Now, we expect the last inserted value at index `0`.
    // However, due to an off-by-one error in the remove function,
    // this assertion will likely fail because it accesses uninitialized memory.
    assert_eq!(slab[0].0, 456);  // This line demonstrates the memory leak/uninitialized access issue
}
