#![forbid(unsafe_code)]

use std::ops::Deref;
use std::rc::Rc;

const NUM_CLONES: usize = 1000000;

// Assuming conqueue and crossbeam_utils crates are added to Cargo.toml
#[macro_use]
extern crate conqueue;
extern crate crossbeam_utils;

fn main() {
    let (tx, mut rx) = Queue::unbounded();

    // Example non-Send type Rc<bool>
    let rc = Rc::new(true);
    tx.push(Box::new(rc.clone()));

    use crossbeam_utils::thread;

    thread::scope(|s| {
        let child = s.spawn(|_| {
            let smuggled: Box<Rc<bool>> = rx.pop().unwrap();
            for _ in 0..NUM_CLONES {
                std::mem::forget(smuggled.clone());
            }
        });

        // Clone the Rc on the main thread
        for _ in 0..NUM_CLONES {
            std::mem::forget(rc.clone());
        }

        child.join().unwrap();

        // Expected strong_count should be 2 * NUM_CLONES + 1 if no data race occurs.
        assert_eq!(Rc::strong_count(&rc), 2 * NUM_CLONES + 1);
    })
    .unwrap();
}
