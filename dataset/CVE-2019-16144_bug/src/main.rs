// This is an external crate used in this example.
extern crate generator;

use std::borrow::Cow;
use generator::Gn;

pub struct TestStruct<'a> {
    pub name: Cow<'a, str>,
    pub value: i32,
}

impl<'a> TestStruct<'a> {
    pub fn new() -> TestStruct<'a> {
        TestStruct { 
            name: Cow::Owned("test".to_string()), 
            value: 0
        }
    }
}

pub fn test_1gen<'a>() -> impl Iterator<Item = TestStruct<'a>> {
    Gn::new_scoped(move |mut s| {
        for _i in (0..10).step_by(2) {
            let py = TestStruct::new();
            // The yield operation might be causing the issue here.
            s.yield_(py);
        }
        generator::done!();  // This macro triggers a drop which seems to cause an invalid pointer error
    })
}

pub fn test_2gen<'a>() -> impl Iterator<Item = TestStruct<'a>> {
    let iter_test = test_1gen();

    Gn::new_scoped(move |mut s| {
        for i in iter_test {
            // The second yield might be causing the issue.
            s.yield_(i);
        }
        generator::done!();
    })
}

fn main() {
    for i in test_2gen() {
        println!("{}", i.name);  // This line should trigger an error if the bug is present
    }
}
