//! PoC for RustSec-2020-0041 (sized-chunks Issue #11)

use sized_chunks::{Chunk, InlineArray};
use typenum::*;
#[repr(align(256))]
struct LargeAlign(u8);

fn main() {
    // 1. unit / pair ignore capacity, len can overflow zero-sized capacity
    let mut c = Chunk::<u32, U0>::pair(1, 2);
    c.push_back(3);
    println!("len after push: {}", c.len());
    assert!(c.len() <= U0::USIZE, "length exceeds compile-time capacity");

    // 2. InlineArray hands out unaligned references
    let mut arr = InlineArray::<LargeAlign, [usize; 256]>::new();
    arr.push(LargeAlign(0));
    let ptr = arr.get(0).unwrap() as *const _ as usize;
    assert!(
        ptr % 256 == 0,
        "unaligned reference address is {:#x}", 
        ptr
    );
}
